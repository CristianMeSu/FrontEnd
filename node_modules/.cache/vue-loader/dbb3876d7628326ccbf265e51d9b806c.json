{"remainingRequest":"C:\\Users\\use\\Documents\\Trabajo de Mistah Programah\\FrontEnd\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\use\\Documents\\Trabajo de Mistah Programah\\FrontEnd\\src\\views\\legal\\index.vue?vue&type=template&id=abe0b85c&scoped=true&","dependencies":[{"path":"C:\\Users\\use\\Documents\\Trabajo de Mistah Programah\\FrontEnd\\src\\views\\legal\\index.vue","mtime":1679975306347},{"path":"C:\\Users\\use\\Documents\\Trabajo de Mistah Programah\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636401893889},{"path":"C:\\Users\\use\\Documents\\Trabajo de Mistah Programah\\FrontEnd\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1636401901450},{"path":"C:\\Users\\use\\Documents\\Trabajo de Mistah Programah\\FrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636401893889},{"path":"C:\\Users\\use\\Documents\\Trabajo de Mistah Programah\\FrontEnd\\node_modules\\vue-loader\\lib\\index.js","mtime":1636401899309}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}